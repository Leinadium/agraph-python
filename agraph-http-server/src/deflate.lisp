(in-package :agraph-http-server)

(def-stream-class compressing-stream (terminal-simple-stream)
  ((compressor :accessor compressor)))

(defmethod device-open ((stream compressing-stream) slot-names initargs)
  (declare (ignore slot-names))
  (call-next-method)
  (with-stream-class (compressing-stream stream)
    (let ((base-stream (sm excl::output-handle stream)))
      (assert base-stream)
      (flet ((write-buf (buf n)
               (write-sequence buf base-stream :end n)))
        (setf (compressor stream)
              (make-instance (or (getf initargs :compressor) 'salza2:deflate-compressor)
                             :callback #'write-buf))))))

(defmethod device-write ((stream compressing-stream) buffer start end blocking)
  (let ((flush (eq buffer :flush))
	(res 0))
    (with-stream-class (compressing-stream stream)
      (when (and (or flush (null buffer)))
	(setf buffer (sm excl::out-buffer stream)))
      (when (> end start)
        (setq res (- end start))
        (salza2:compress-octet-vector buffer (compressor stream) :start start :end end)
        (when flush
          (let ((base-stream (sm excl::output-handle stream)))
            (if blocking (finish-output base-stream) (force-output base-stream))))))
    res))

(defmethod device-close ((stream compressing-stream) abort)
  (declare (ignore abort))
  (finish-output stream)
  (salza2:finish-compression (compressor stream)))

(defmacro with-deflate ((var stream &optional class) &body body)
  `(let ((,var (make-instance 'compressing-stream :output-handle ,stream :compressor ,class)))
     (unwind-protect (progn ,@body)
       (close ,var))))
