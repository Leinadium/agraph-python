(in-package :agraph-http-tests)

(defun build-quads ()
  (loop :for i :below 40
        :collect (list (format nil "\"~a\"" i) "<http://example.com/precedes>" (format nil "\"~a\"" (1+ i))
                       (cond ((< i 10) "<http://example.com/small>")
                             ((< i 30) "<http://example.com/medium>")
                             (t "<http://example.com/large>")))))

(defun vals (result)
  (nth-value 0 (getjso "values" result)))

(with-tests (:name "AG http server")
  (with-server
    (let ((client (make-instance 'agraph-http-client :url "http://heffalump:8080")))
      (test '("/catalogs/catalog") (list-catalogs client) :test #'equal)
      (let ((repo (get-catalog client "/catalogs/catalog")))
        (test nil (list-triple-stores repo))
        (create-triple-store repo "foo")
        (create-triple-store repo "bar")
        (test '("bar" "foo") (sort (list-triple-stores repo) #'string<) :test #'equal)
        (delete-triple-store repo "foo")
        (test '("bar") (list-triple-stores repo) :test #'equal)
        (create-triple-store repo "foo")
        (test '("bar" "foo") (sort (list-triple-stores repo) #'string<) :test #'equal)
        (delete-triple-store repo "bar")

        (let ((rep (get-repository repo "foo"))
              (statement '("\"abc\"@en" "<http://something.org/predicate>"
                           "\"xyzzy\"^^<http://marijn.haverbeke.nl/types#magic>"
                           "<http://context.net/55>")))
          (test 0 (repository-size rep))
          (apply #'add-statement rep statement)
          (test 1 (repository-size rep))
          (test 0 (repository-index-coverage rep) :test #'=)
          (index-repository rep t)
          (test 1 (repository-index-coverage rep) :test #'=)
          (test nil (get-statements rep :subj "\"nil\""))
          (let ((c55 (get-statements rep :contexts "<http://context.net/55>")))
            (test 1 (length c55))
            (test statement (car c55) :test #'equal))
          (delete-matching-statements rep :pred "<http://foo.net>")
          (test 1 (repository-size rep))
          (delete-matching-statements rep)
          (test 0 (repository-size rep)))

        (let ((rep (get-repository repo "foo"))
              (quads (build-quads)))
          (add-statements rep quads)
          (test 40 (repository-size rep))
          (test 20 (length (get-statements rep :contexts '("<http://example.com/small>" "<http://example.com/large>"))))
          (test '(("<http://example.com/precedes>" "\"1\""))
                (vals (sparql-query rep "select ?p ?o {\"0\" ?p ?o}")) :test #'equal)
          (test 20 (length (vals (sparql-query rep "select ?x {?x ?y ?z}" nil '("<http://example.com/medium>")))))
          (delete-statements rep (cdr quads))
          (test 1 (repository-size rep))
          (delete-matching-statements rep))

        (let ((rep (get-repository repo "foo")))
          (test nil (repository-environments rep))
          (test-if (assoc "rdf" (repository-namespaces rep) :test #'string=))
          (create-environment rep "env")
          (test '("env") (repository-environments rep) :test #'equal)
          (setf (repository-environment rep) "env")
          (define-namespace rep "fr" "http://www.franz.com/simple#")
          (test-if (assoc "fr" (repository-namespaces rep) :test #'string=))
          (add-ntriples-statements rep :file (package-path "test/data/kennedy.ntriples"))
          (test 2 (length (vals (prolog-query rep "(select ?p (q- !fr:person4 !fr:has-parent ?p))"))))
          (define-prolog-functor rep "(<-- (is-father ?f ?c) (q- ?c !fr:has-parent ?f) (q- ?f !fr:sex !fr:male))")
          (test "<http://www.franz.com/simple#person1>"
                (caar (vals (prolog-query rep "(select ?f (is-father ?f !fr:person4))")))
                :test #'equal)
          (setf (repository-environment rep) nil)
          (delete-environment rep "env")
          (test nil (repository-environments rep))
          (delete-matching-statements rep))

        (delete-triple-store repo "foo")))))
